name: Semantic Versioning

on:
  push:
    branches:
      - master
      - staging
      - develop

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI_COMMIT_MESSAGE: CI Automatic push
  CI_COMMIT_AUTHOR: ci@users.noreply.github.com

jobs:
  semantic_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

      - name: Perform semantic version
        uses: paulhatch/semantic-version@v5.4.0
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}-rc${increment}"
          user_format_type: "csv"
          bump_each_commit: true
          search_commit_body: true

      - name: Override to minor if MAJOR on non-master branch
        if: steps.branch_name.outputs.branch != 'master' && contains(github.event.head_commit.message, '(MAJOR)')
        run: |
          echo "Overriding MAJOR to MINOR on non-master branch"
          echo "::set-output name=version::$(echo ${{ steps.semantic_version.outputs.version }} | awk -F. '{$2++; print $1"."$2"."$3}')"
        id: override_version

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.override_version.outputs.version || steps.semantic_version.outputs.version_tag }}
          tag_prefix: ""
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.7.0
        with:
          fromTag: v${{ steps.semantic_version.outputs.previous_version }}
          toTag: ${{ steps.tag_version.outputs.new_tag }}

      - name: Create release
        uses: ncipollo/release-action@v1
        id: release
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.semantic_version.outputs.version_tag }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ steps.branch_name.outputs.branch != 'master' }}
          commit: ${{ steps.semantic_version.outputs.current_commit }}      

      - name: Update version info JSON
        run: |
          new_entry=$(jq -n \
            --arg hash "${{ github.sha }}" \
            --arg pr "${{ github.event.pull_request.html_url }}" \
            --arg user "${{ github.actor }}" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --arg branch "${{ github.ref_name }}" \
            '{
              "hash": $hash,
              "pull_request_url": $pr,
              "user": $user,
              "timestamp": $timestamp,
              "branch": $branch
            }')

          if [ -f version_info.json ]; then
            jq --argjson new_entry "$new_entry" \
              '. + [$new_entry] | sort_by(.timestamp) | reverse | .[0:10000]' \
              version_info.json > temp.json && mv temp.json version_info.json
          else
            echo "[$new_entry]" > version_info.json
          fi
          git add version_info.json


      - name: Update CHANGELOG
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ env.CI_COMMIT_AUTHOR }}"
          changelog='${{ steps.build_changelog.outputs.changelog }}'
          if [ -n "$changelog" ]; then
            escaped_changelog=$(printf '%s\n' "$changelog" | sed 's/\\/&&/g;s/^[[:blank:]]/\\&/;s/$/\\/')
            sed -i "2i ${escaped_changelog%?}" CHANGELOG.md
          fi
          sed -i "2i ## ${{ steps.semantic_version.outputs.version_tag }} - $(date +'%d-%m-%Y')" CHANGELOG.md
          git add CHANGELOG.md
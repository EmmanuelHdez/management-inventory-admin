name: Semantic Versioning For Release

on:
  push:
    branches:
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI_COMMIT_MESSAGE: CI Automatic Release version push
  CI_COMMIT_AUTHOR: ci@users.noreply.github.com
  MAIN_BRANCH: master
  STAGING_BRANCH: rc/5.0.0/27-08-2024
  DEVELOP_BRANCH: develop


jobs:
  semantic_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Perform semantic version
        uses: paulhatch/semantic-version@v5.4.0
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          patch_pattern: "(PATCH)"
          version_format: "${major}.${minor}.${patch}-rc${increment}"
          user_format_type: "csv"
          bump_each_commit: false
          search_commit_body: true  
             
      - name: Generate changelog
        id: generate_changelog
        run: |
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" | while read -r line; do
            if [[ $line == *"(MAJOR)"* ]]; then
              echo "üöÄ $line" >> changelog.md
            elif [[ $line == *"(MINOR)"* ]]; then
              echo "‚ú® $line" >> changelog.md
            elif [[ $line == *"(PATCH)"* ]]; then
              echo "üêõ $line" >> changelog.md
            else
              echo "- $line" >> changelog.md
            fi
          done
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Get previous tag
        id: previoustag
        run: |
          echo "previous_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.override_version.outputs.version || steps.semantic_version.outputs.version_tag }}
          tag_prefix: ""
          github_token: ${{ secrets.GITHUB_TOKEN }}   

      - name: Debug version information
        run: |
          echo "Previous tag: ${{ steps.previoustag.outputs.previous_tag }}"
          echo "New tag: ${{ steps.tag_version.outputs.new_tag }}"
      
      - name: Get PR description
        id: pr_description
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "This is a pull request event"
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR title: ${{ github.event.pull_request.title }}"
            PR_DESCRIPTION="${{ github.event.pull_request.body }}"
          else
            echo "This is not a pull request event, trying to find associated PR"
            PR_NUMBER=$(gh pr list --base ${{ github.ref_name }} --head ${{ github.sha }} --json number --jq '.[0].number')
            if [[ -n "$PR_NUMBER" ]]; then
              echo "Found associated PR number: $PR_NUMBER"
              PR_DESCRIPTION=$(gh pr view $PR_NUMBER --json body --jq '.body')
            else
              echo "No associated PR found"
              PR_DESCRIPTION="No associated PR found"
            fi
          fi
          
          if [[ -n "$PR_DESCRIPTION" ]]; then
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "$PR_DESCRIPTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "description_found=true" >> $GITHUB_OUTPUT
          else
            echo "description=No PR description found" >> $GITHUB_OUTPUT
            echo "description_found=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug PR description
        run: |
          echo "PR description found: ${{ steps.pr_description.outputs.description_found }}"
          echo "PR description:"
          echo "${{ steps.pr_description.outputs.description }}"

      - name: Create release
        uses: ncipollo/release-action@v1
        id: release
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.semantic_version.outputs.version_tag }}
          body: |
            ${{ steps.generate_changelog.outputs.CHANGELOG }}

            PR Message (Features):
            ${{ steps.pr_description.outputs.description }}
            
            [View full changes](https://github.com/${{ github.repository }}/compare/${{ steps.previoustag.outputs.previous_tag }}...${{ steps.tag_version.outputs.new_tag }})
          draft: false
          prerelease: ${{ steps.branch_name.outputs.branch != env.MAIN_BRANCH }}
          commit: ${{ steps.semantic_version.outputs.current_commit }}     

      - name: Update version info JSON
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ env.CI_COMMIT_AUTHOR }}"
          echo "Output GitHub information:"
          echo '${{ toJson(github) }}' | jq '.'

          commit_info='${{ toJson(github.event.head_commit) }}'          

          new_entry=$(jq -n \
            --arg hash "${{ github.sha }}" \
            --argjson commitInfo "$commit_info" \
            --arg pr2 "${{ github.event.pull_request._links.html.href }}" \
            --arg user "${{ github.actor }}" \
            --arg timestamp "$(TZ='Europe/London' date +"%Y-%m-%dT%H:%M:%S%z")" \
            --arg branch "${{ github.ref_name }}" \
            --arg userPhoto "${{ github.event.sender.avatar_url }}" \
            '{
              "hash": $hash,
              "commitInfo": $commitInfo,
              "pull_request_url2": $pr2,
              "user": $user,
              "timestamp": $timestamp,
              "branch": $branch,
              "userPhoto": $userPhoto
            }')

          echo "New entry to add:"
          echo "$new_entry" | jq '.'

          if [ -f version_info.json ]; then
            jq --argjson new_entry "$new_entry" \
              '. + [$new_entry] | sort_by(.timestamp) | reverse | .[0:10000]' \
              version_info.json > temp.json && mv temp.json version_info.json
          else
            echo "[$new_entry]" > version_info.json
          fi
          git add version_info.json      
          
      - name: Update version info JSON
        run: |
          # ... (c√≥digo existente para actualizar version_info.json)
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version_info.json

      - name: Commit and push changes to multiple branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Commit changes
          git commit -m "chore: update version_info.json [skip ci]"          
          git push origin HEAD:${MAIN_BRANCH}

          # Push to staging
          git fetch origin ${STAGING_BRANCH}:${STAGING_BRANCH}
          git checkout ${STAGING_BRANCH}
          git checkout ${MAIN_BRANCH} -- version_info.json
          git add version_info.json
          git commit -m "chore: update version_info.json [skip ci]"
          git push origin ${STAGING_BRANCH}

          # Push to develop
          git fetch origin ${DEVELOP_BRANCH}:${DEVELOP_BRANCH}
          git checkout ${DEVELOP_BRANCH}
          git checkout ${MAIN_BRANCH} -- version_info.json
          git add version_info.json
          git commit -m "chore: update version_info.json [skip ci]"
          git push origin ${DEVELOP_BRANCH}
          
          git checkout ${MAIN_BRANCH}
name: Semantic Versioning For Release

on:
  push:
    branches:
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CI_COMMIT_MESSAGE: CI Automatic push
  CI_COMMIT_AUTHOR: ci@users.noreply.github.com

jobs:
  semantic_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get branch name
        id: branch_name
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Perform semantic version
        uses: paulhatch/semantic-version@v5.4.0
        id: semantic_version
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          patch_pattern: "(PATCH)"
          version_format: "${major}.${minor}.${patch}-rc${increment}"
          user_format_type: "csv"
          bump_each_commit: false
          search_commit_body: true      

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.override_version.outputs.version || steps.semantic_version.outputs.version_tag }}
          tag_prefix: ""
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.7.0
        with:
          fromTag: v${{ steps.semantic_version.outputs.previous_version }}
          toTag: ${{ steps.tag_version.outputs.new_tag }}
          configuration: |
            {
              "categories": [
                {
                  "title": "üöÄ Features",
                  "labels": ["feature", "enhancement", "MINOR", "MAJOR"]
                },
                {
                  "title": "üêõ Fixes",
                  "labels": ["fix", "bugfix", "bug", "PATCH"]
                }
              ],
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "pr_template": "- {title}\n   - PR: #{number}",
              "empty_template": "- No changes"
            }

      - name: Create release
        uses: ncipollo/release-action@v1
        id: release
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.semantic_version.outputs.version_tag }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ steps.branch_name.outputs.branch != 'master' }}
          commit: ${{ steps.semantic_version.outputs.current_commit }}      

      - name: Update version info JSON
        run: |
          echo "Output GitHub information:"
          echo '${{ toJson(github) }}' | jq '.'

          commit_info='${{ toJson(github.event.head_commit) }}'          

          new_entry=$(jq -n \
            --arg hash "${{ github.sha }}" \
            --argjson commitInfo "$commit_info" \
            --arg pr2 "${{ github.event.pull_request._links.html.href }}" \
            --arg user "${{ github.actor }}" \
            --arg timestamp "$(TZ='Europe/London' date +"%Y-%m-%dT%H:%M:%S%z")" \
            --arg branch "${{ github.ref_name }}" \
            --arg userPhoto "${{ github.event.sender.avatar_url }}" \
            '{
              "hash": $hash,
              "commitInfo": $commitInfo,
              "pull_request_url2": $pr2,
              "user": $user,
              "timestamp": $timestamp,
              "branch": $branch,
              "userPhoto": $userPhoto
            }')

          echo "New entry to add:"
          echo "$new_entry" | jq '.'

          if [ -f version_info.json ]; then
            jq --argjson new_entry "$new_entry" \
              '. + [$new_entry] | sort_by(.timestamp) | reverse | .[0:10000]' \
              version_info.json > temp.json && mv temp.json version_info.json
          else
            echo "[$new_entry]" > version_info.json
          fi
          git add version_info.json

      - name: Update CHANGELOG
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ env.CI_COMMIT_AUTHOR }}"
          
          echo "Changelog content:"
          echo "${{ steps.build_changelog.outputs.changelog }}"
          
          changelog='${{ steps.build_changelog.outputs.changelog }}'
          if [ -n "$changelog" ]; then
            echo "Updating CHANGELOG.md"
            echo -e "## ${{ steps.semantic_version.outputs.version_tag }} - $(date +'%d-%m-%Y')\n\n$changelog\n\n$(cat CHANGELOG.md)" > CHANGELOG.md.tmp
            mv CHANGELOG.md.tmp CHANGELOG.md
            echo "CHANGELOG.md updated"
          else
            echo "Changelog is empty, not updating CHANGELOG.md"
          fi
          
          echo "Content of CHANGELOG.md:"
          cat CHANGELOG.md
          
          git add CHANGELOG.md
          
          if git diff --staged --quiet; then
            echo "No changes to commit in CHANGELOG.md"
          else
            echo "Changes detected in CHANGELOG.md"
          fi
          
      - name: Commit and push changes
        run: |
          git commit -m "chore: update CHANGELOG.md and version_info.json [skip ci]"
          git push